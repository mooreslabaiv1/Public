### Test Case 1: Verify Output Byte with Correct Parity Check

**Name:** TestCase1_CorrectParity

**Description:** This test case verifies the functionality of the serialDP module in successfully receiving and outputting the byte when the input stream has the correct odd parity. It checks the module's ability to assert the `done` signal correctly after receiving a valid stop bit with correct data parity.

**Expectation:** The module should output the correct byte, and the `done` signal should be asserted after receiving the stop bit if the data bits have an odd number of 1's.

**Steps:**
1. Initialize all signals, set `reset` high for 2 cycles to reset the module.
2. Provide a serial input stream having format `<start_bit =0>,<8 data bits serial>,<parity bit = 0 for odd parity>,<stop bit = 1>`.
3. Ensure `done` is `0` initially.
4. Monitor `out_byte` and `done` signals.
5. Verify `out_byte` contains the expected data byte.
6. Confirm `done` is asserted after 1 clock cycle following the correct stop bit.

---

### Test Case 2: Verify Functionality with Incorrect Parity

**Name:** TestCase2_IncorrectParity

**Description:** This test case assesses the serial receiver's response when an input stream with incorrect parity is supplied. It ensures that no `done` signal is asserted and `out_byte` remains unchanged when the input parity check fails.

**Expectation:** The module should not assert the `done` signal, indicating a parity error, and `out_byte` should remain unchanged or zero after the receipt of the input stream.

**Steps:**
1. Initialize the module with `reset` high for 2 cycles.
2. Provide a serial input with incorrect odd parity in the format `<start_bit =0>,<8 data bits serial>,<parity bit = 1 for incorrect parity>,<stop bit = 1>`.
3. Ensure `done` and `out_byte` are stable prior to start.
4. Observe `done` signal; it should not assert.
5. Validate `out_byte` remains at its initial value or reset state.
6. Confirm that recovery occurs, preparing for the next valid sample.
7. Send a valid input and make sure it completes with done signal.
