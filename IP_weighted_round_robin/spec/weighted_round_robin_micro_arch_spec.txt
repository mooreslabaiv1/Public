High-Level Architecture Overview
The weighted_round_robin (WRR) module is designed to efficiently arbitrate between multiple simultaneous requests in a prioritized manner. By incorporating weighted round-robin scheduling, the module balances fairness across requestors while honoring varying importance through assigned priorities. This system is ideal for scenarios where resources must be distributed equitably, yet some requestors inherently require more frequent access based on application-specific criteria.

Functional Description
The WRR module operates as an arbiter, managing N distinct request signals. Each request is coupled with a priority level, dictating its access frequency. The module dynamically updates priorities and efficiently cycles through requests to ensure fair, prioritized access. Key functionalities include:

Priority-Based Arbitration: Assigns resources such that higher priority requests receive more frequent access, within the bounds of a fair scheduling cycle. Priorities can be updated dynamically during operation.

Round-Robin Scheduling: Implements a systematic turn-taking scheme among requestors, preventing starvation and ensuring equitable access over time.

Weighted Scheduling: Adjusts the basic round-robin mechanism by factoring priority weights, allowing frequently required resources for higher priority requests.

Input Ports
clk (logic):

Clock signal for synchronizing operations.
rst (logic):

Active high reset signal. Resets internal states and counters to initial default values.
req (logic [N-1:0]):

Request signals from multiple requestors. Each bit represents a request from a requestor, where the i-th bit is the request from requestor i.
ack (logic):

Acknowledgment signal indicating that a granted request has been processed, enabling pointer updates for further request cycling.
prio (logic [PRIORITY_W-1:0]):

New priority value assigned to a specific requestor, used during dynamic priority updates.
prio_id (logic [ID_BITS-1:0]):

Identifier for the requestor whose priority is being updated.
prio_upt (logic):

Priority update signal, enables the module to update the specified requestor's priority value.
Output Ports
gnt_w (logic [N-1:0]):

One-hot grant vector that indicates which requestor has been granted access in the current cycle. The i-th bit is set if requestor i is granted.
gnt_id (logic [ID_BITS-1:0]):

Identifier indicating which requestor has been granted access. This translates the one-hot gnt_w vector to an ID for external interpretation.
Functional Flow
Initialization and Reset:

On receiving a reset signal, the WRR module initializes its internal state and counters to ensure a clean start. Default priorities are set, and internal pointers are reset.
Request Processing:

Incoming requests are evaluated based on current priorities and cyclic positions. The module computes weighted requests and determines which requestor should be granted access, assured by the fairness of the round-robin scheduler.
Grant Issuance:

Outputs the decision via gnt_w and gnt_id, indicating the requestor that will be served. This ensures efficient resource allocation based on weighted priorities.
Priority and Pointer Updates:

Following a grant acknowledgement, internal pointers are updated to rotate access, ensuring subsequent requests are managed continually. If a priority update signal is received, the specified requestor's priority is updated accordingly.
