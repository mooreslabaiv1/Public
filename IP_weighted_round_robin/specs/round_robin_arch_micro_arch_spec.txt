

Architecture Specification of Weighted Round Robin Design

//----------------
Overview

The weighted round-robin (WRR) design is a hardware-based arbitration mechanism used to allocate a shared resource, such as a communication channel or memory, among multiple requesters in a fair and efficient manner. This design includes features for dynamically adjusting weights to favor certain requestors, which allows for differentiated service and priority allocation. The core elements include a set of requestors, weights, priority configuration, and control mechanisms for maintaining fairness and ensuring efficient utilization of shared resources.

Functional Requirements

Fair Arbitration: The WRR scheme aims to allocate resources to requestors based on their relative weights. Higher-weighted requestors receive more grants compared to lower-weighted requestors over time.

Dynamic Priority Adjustment: The priorities can be modified during runtime using an interface, allowing for the system to adapt to changing needs without requiring a reset.

Round Robin Fairness: Each requestor is given a chance to access the shared resource, ensuring that no requestor is starved.

Cycle-by-Cycle Update: The system should update grants on a per-clock-cycle basis, maintaining real-time arbitration decisions.

Parameters

N: The number of requestors supported by the system. For this implementation, it is parameterized to 32.

PRIORITY_W: The width of the priority bit vector, set as 4 bits, allowing for 16 distinct priority levels.

ID_BITS: Calculated based on the number of requestors (N), representing the unique identifier width for each requestor.

Interfaces

Inputs:

clk: System clock.

rst: System reset, used to initialize or reset the arbitration logic.

req[N-1:0]: Request signals from N different requestors.

prio[PRIORITY_W-1:0]: Input to set the priority weight for a given requestor.

prio_id[ID_BITS-1:0]: Identifier specifying which requestor's priority is being updated.

prio_upt: Control signal to trigger an update of the priority.

ack: Acknowledgment signal indicating that the granted request has been processed.

Outputs:

gnt_w[N-1:0]: Grant signals indicating which requestor has been granted access.

gnt_id[ID_BITS-1:0]: ID of the requestor that has been granted access.

Priority Handling

Priority Storage: The design uses a vector (priority_vec_t) to maintain and update priorities for each requestor. Each requestor's priority is stored and used directly without bit reversal.

Dynamic Update: The priority vector can be updated based on external control (prio and prio_upt inputs). This feature provides flexibility to alter requestor priorities as system demands change.
//----------------




Micro-Architecture Specification of Weighted Round Robin Design
//----------------
Overview

The micro-architecture of the WRR design revolves around three key components:

Priority Storage and Management

Grant Logic

Combinatorial Logic for Round Robin Arbitration

These components work in tandem to ensure that all requests are processed in a round-robin fashion, but weighted based on dynamically assigned priorities.

Priority Storage and Management

Priority Vector (priority_vec_t): The priority vector is implemented as a packed structure, storing the priorities of all requestors. Each element of the vector is updated based on the prio input if the prio_upt signal is asserted.

Grant Logic

Grant Pointer: Instead of a complex cycle label counter, a simpler grant pointer is used to keep track of which requestor should be granted access next. This pointer increments whenever a grant is acknowledged, allowing for round-robin traversal of requestors.

Round Robin Grant and Request Handling

Grant Masking: The round_req signal holds the active requests masked by their respective priorities. The sel_vec signal then identifies which requestor(s) should be considered for the current grant based on a round-robin scan.

Selection Logic: The sel_vec_mask is used to prevent multiple requestors from being granted simultaneously. The ffs (find first set) logic is used to determine which requestor is to be served during the current arbitration cycle.

State Management

Grant Pointer Update: The grant pointer is updated based on enable signals, which depend on either a reset or an acknowledgment. The update ensures that the WRR arbitration continues to function consistently without locking any requestor out indefinitely.

Priority Update Enable: The priority_vec_en signal is asserted whenever the system is reset or when a priority update is required, ensuring that priority changes are reflected in real time.

Output Logic

Grant Signals: The gnt_w output is assigned based on the value of sel_vec_1d, indicating which requestor is being granted access.

Grant ID: The gnt_id output carries the ID of the granted requestor, derived from the sel_vec output.

FSM and Arbitration Workflow

The core of the design is a finite-state machine (FSM) that operates in three states: IDLE, ARBITRATION, and UPDATE.

IDLE: Waits for requests.

ARBITRATION: Handles the selection of the requestor using weighted round-robin logic.

UPDATE: Updates the priority and pointer states based on the acknowledgment from the external system.

Performance and Efficiency Considerations

The WRR implementation ensures that no requestor is starved, and each is served in proportion to its assigned weight. The use of cycle-by-cycle update logic allows the WRR to efficiently handle bursts of requests while prioritizing those with higher weights.

The use of a simple pointer mechanism helps in efficient traversal through the requestors, improving the overall throughput without the need for complex sterile mask calculations.

//---------------