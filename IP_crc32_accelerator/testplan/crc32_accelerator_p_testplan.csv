Name,Description,Expectation,Steps
Multiple Byte Sequence,Validate the CRC calculation for a sequence of bytes.,The CRC calculated should match the expected result for the sequence.,"1. Input a sequence of 'Hello World\n', with `data_valid` asserted for each byte.
2. After the last byte, check `crc_valid`.
3. Validate that `crc_out` matches the CRC of the entire sequence."
Idle State Maintenance,Ensure the module maintains consistent state when no data is provided.,`crc` and `crc_valid` should remain unchanged when `data_valid` is low.,"1. Send 5 valid data transactions.
2. Hold `data_valid` low.
3. Monitor `crc` and `crc_valid`.
4. Verify no changes occur to these signals when no data is inputted.
5. Send 5 more valid data transactions."
All zeros,Check behavior when all the input data is 0.,"The module should only process the input data and exhibit valid CRC.","1. Send 5 valid data transactions.
2. Hold `data_valid` low."
All ones,Check behavior when all the input data is 0xFF.,"The module should only process the input data and exhibit valid CRC.","1. Send 5 valid data transactions.
2. Hold `data_valid` low."
Reset Behavior,Check if the CRC module initializes correctly on reset.,"When the `rst` signal is high, the `crc` register should reset to `0xFFFFFFFF`, `count` to 0, and `crc_valid` should be low.","1. Add a conditional code based on UVM_TEST to assert reset for 5 clock cyles, deassert for 10 clock cyles, assert for 5 clock cycles and then deassert to the testbench top file.
2. The test must run atleast 20 transactions.
3. Verify that `crc` is set to `0xFFFFFFFF`, `count` is 0, and `crc_valid` is low.
4. Make sure that all the previous testcases are still functional."
